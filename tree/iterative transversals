vector<int> preorder(Node* root)
    {  
        vector<int> ans;
        stack<Node*> s;
        if(root==NULL)
            return;
         Node* curr=root;
        while(s.size()||curr)
            {
                while(curr!=NULL)
                {
                    ans.push_back(curr->data);
                if(curr->right)
                    s.push(curr->right);
                curr=curr->left    ;
                }
                if(curr==NULL&&s.size())
                    {
                        curr=s.top();
                        s.pop();
                    }
                
            }
            return ans;
    }
vector<int> inorder(Node* root) { 
        vector<int> ans;
        if(root==NULL)
            return ans;
        stack<Node*> s;
        Node* curr=root;
        while(curr||s.size())
            {
                while(curr)
                    {
                        s.push(curr);
                        curr=curr->left;
                    }
               
                        curr=s.top();
                         s.pop();
                        ans.push_back(curr->data);
                        curr=curr->right;
                    
                    
            }
            return ans;
    } 
vector <int> postorder(Node* root)
{
 
  vector<int> ans;
  stack<Node*> s;
  s.push(root);
  while(s.size())
    {
        Node* curr=s.top();
        s.pop();
        ans.push_back(curr->data);
        if(curr->left)
            s.push(curr->left);
        if(curr->right)
            s.push(curr->right);
    }
    reverse(ans.begin(),ans.end());
    return ans;
}   
vector<int> levelOrder(Node* node)
    {
     
      queue<Node*> q;
      vector<int> ans;
      if(node==NULL)
        return ans;
    q.push(node);    
      while(q.size())
        {
            ans.push_back(q.front()->data);
            Node* curr=q.front();
            q.pop();
            if(curr->left)
                q.push(curr->left);
            if(curr->right)
                q.push(curr->right);
        }
        return ans;
    }


